[[plugins]]
repo = 'Shougo/denite.nvim'
on_event = 'CmdlineEnter'
hook_source = '''
  source ~/dotfiles/nvim/plugins/denite.rc.vim
'''
hook_add = '''
  nnoremap <Space>d :Denite<Space>
  nnoremap <silent> <Space>g <cmd>Denite grep
      \ -no-empty -auto-action=preview_bat -buffer-name=grep -no-auto-resize<CR>
  nnoremap <silent> <Space>b <cmd>Denite buffer<CR>
  nnoremap <silent> <Space>a <cmd>Denite file/rec<CR>
  nnoremap <silent> <Space>s <cmd>Denite directory_rec<CR>
  nnoremap <silent> <Space>f <cmd>Denite file/rec:~/dotfiles<CR>
  nnoremap <silent> <Space>o <cmd>Denite file/old<CR>
  nnoremap <silent> <Space>h <cmd>Denite help<CR>
  nnoremap <silent> <Space>n <cmd>Denite dein ghq<CR>
  nnoremap <silent> <Space>/ <cmd>Denite line<CR>
  nnoremap <silent> <Space>r <cmd>Denite -resume<CR>
  nnoremap <silent> gn <cmd>Denite gina/command<CR>
  cnoremap <expr><silent> <C-t>
      \ "<c-u>Denite command_history -start-filter -input='" . getcmdline() . "'<CR>"
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = 'QuickRun'
depends = ['vim-quickrun-runner-nvimterm']
hook_add = '''
  function! My_quickrun_redirect() abort
    let input_file = expand('%:h') . '/in.txt'
    if filereadable(input_file)
      execute 'QuickRun <' . input_file
    else
      QuickRun
    endif
  endfunction
'''
hook_source = '''
  source ~/dotfiles/nvim/plugins/quickrun.rc.vim
'''

[[plugins]]
repo = 'statiolake/vim-quickrun-runner-nvimterm'
if = 'has("nvim")'

[[plugins]]
repo = 'itchyny/calendar.vim'
on_cmd = 'Calendar'
hook_source = '''
  if filereadable(expand('~/.cache/calendar.vim/credentials.vim', ':h:p'))
    let g:calendar_google_calendar = 1
    let g:calendar_google_task = 1
    source ~/.cache/calendar.vim/credentials.vim
  endif
  autocmd MyAutoCmd FileType calendar call s:calendar_my_settings()
  function s:calendar_my_settings()
    nnoremap <buffer> <C-j> gT
    nnoremap <buffer> <C-k> gt
  endfunction
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
depends = ['defx-icons', 'defx-sftp']
hook_source = '''
  source ~/dotfiles/nvim/plugins/defx.rc.vim
'''
hook_add = '''
  nnoremap <silent><C-f> <cmd>Defx -buffer-name=`'defx' . t:defx_index`<CR>
  nnoremap <silent> <Space>w <cmd>Defx -buffer-name=`'defx' . t:defx_index` ~/work<CR>
  nnoremap <silent> <Space>p <cmd>Defx -buffer-name=`'defx' . t:defx_index` ~/.cache/dein/repos/github.com<CR>
'''

[[plugins]]
repo = 'kristijanhusak/defx-icons'
hook_add = '''
  let g:defx_icons_column_length = 2
'''

[[plugins]]
repo = 'matsui54/defx-sftp'
if = '!vimrc#is_windows()'

[[plugins]]
repo = 'Shougo/deol.nvim'
hook_add = '''
  tnoremap <C-\><C-\> <C-\><C-N><cmd>Deol -toggle<CR>
  nnoremap <expr> <C-\><C-\> '<cmd>Deol -toggle -winwidth=' . &columns/2 . ' ' .
  \ ((winnr('$') == 1 && bufname()=='') ? '<CR>' : '-split=vertical<CR>')
  nnoremap <C-\>j <cmd>Deol -toggle -split=h<CR>
'''

[[plugins]]
repo = 'rhysd/clever-f.vim'
on_map = '<Plug>'
hook_add = '''
  let g:clever_f_not_overwrites_standard_mappings = 1
  let g:clever_f_mark_direct = 1
  let g:clever_f_smart_case = 1
  let g:clever_f_use_migemo = 1
  nmap f <Plug>(clever-f-f)
  xmap f <Plug>(clever-f-f)
  omap f <Plug>(clever-f-f)
  nmap F <Plug>(clever-f-F)
  xmap F <Plug>(clever-f-F)
  omap F <Plug>(clever-f-F)
  nmap t <Plug>(clever-f-t)
  xmap t <Plug>(clever-f-t)
  omap t <Plug>(clever-f-t)
  nmap T <Plug>(clever-f-T)
  xmap T <Plug>(clever-f-T)
  omap T <Plug>(clever-f-T)
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
depends = ['vim-vsnip-integ', 'friendly-snippets']
on_event = 'InsertEnter'
hook_add = '''
" Expand
imap <expr> <C-l> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-l>'
smap <expr> <C-l> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-l>'

" Jump forward or backward
imap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
smap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
imap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
smap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'

[[plugins]]
repo = 'rafamadriz/friendly-snippets'

[[plugins]]
repo = 'tyru/open-browser.vim'
on_map = '<Plug>(openbrowser'
on_cmd = 'OpenBrowserSearch'
hook_add = '''
	nmap gx <Plug>(openbrowser-smart-search)
	vmap gx <Plug>(openbrowser-smart-search)
'''
hook_source = '''
  for cmd in ['wsl-open', 'xdg-open', 'exo-open']
    if executable(cmd)
      let g:openbrowser_browser_commands = [
      \   {'name': cmd,
      \  "args": ["{browser}", "{uri}"]},
      \]
    endif
  endfor
'''

[[plugins]]
repo = 'previm/previm'
on_cmd = 'PrevimOpen'
hook_source = '''
  let g:previm_show_header=0
  if vimrc#is_wsl()
    let g:previm_open_cmd='wsl-open'
  endif
'''
depends = 'open-browser.vim'

[[plugins]]
repo = 'tyru/eskk.vim'
on_map = {ic = '<Plug>'}
hook_add = '''
  imap <C-j>     <Plug>(eskk:toggle)
  cmap <C-j>     <Plug>(eskk:toggle)
'''
hook_source = '''
  let g:eskk#enable_completion=1
  let g:eskk#directory = expand('~/.cache/eskk')
  let g:eskk#start_completion_length=2
  let g:eskk#tab_select_completion=1
  let g:eskk#dictionary = {
        \   'path': expand('~/.cache/skk-jisyo'),
        \   'sorted': 0,
        \   'encoding': 'utf-8',
        \}
  if has('win32') || has('win64')
    let g:eskk#large_dictionary = {
    \	'path': expand('~/AppData/Local/skk/SKK-JISYO.L'),
    \	'sorted': 1,
    \	'encoding': 'euc-jp',
    \}
  endif

  autocmd MyAutoCmd User eskk-initialize-pre call s:eskk_initial_pre()
  function! s:eskk_initial_pre() abort
    let t = eskk#table#new('rom_to_hira*', 'rom_to_hira')
    call t.add_map('z ', '　')
    call t.add_map('~', '〜')
    call t.add_map('zc', '©')
    call t.add_map('zr', '®')
    call t.add_map('z9', '（')
    call t.add_map('z0', '）')
    call t.add_map('z,', '，')
    call eskk#register_mode_table('hira', t)
  endfunction
  call ddc#custom#patch_global('sources', add(ddc#custom#get_global()['sources'], 'eskk'))
'''

[[plugins]]
repo = 'kuuote/denops-skkeleton.vim'
on_map = {ic = '<Plug>(skkeleton'}
hook_add = '''
  " imap <C-j> <Plug>(skkeleton-enable)
  " cmap <C-j> <Plug>(skkeleton-enable)
'''

[[plugins]]
repo = 'tyru/caw.vim'
on_map = {nx = '<Plug>'}
hook_add = '''
  nmap gc <Plug>(caw:prefix)
  xmap gc <Plug>(caw:prefix)
  nmap gcc <Plug>(caw:hatpos:toggle)
  xmap gcc <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
repo = 'lambdalisue/gina.vim'
on_source = 'denite.nvim'
hook_add = '''
  nnoremap gs <cmd>Gina status<CR>
'''
hook_source = '''
	call gina#custom#mapping#nmap(
	      \ '/.*', '<C-j>',
	      \ 'gT'
	      \)
	call gina#custom#mapping#nmap(
	      \ '/.*', '<C-k>',
	      \ 'gt'
	      \)
	call gina#custom#mapping#nmap(
	      \ 'status', '<Space>gc',
	      \ ':<C-u>Gina commit<CR>',
	      \ {'noremap': 1, 'silent': 1},
	      \)
	call gina#custom#mapping#nmap(
	      \ 'branch', 'o',
	      \ ':call gina#action#call(''new'')<CR>',
	      \ {'noremap': 1, 'silent': 1},
	      \)
	call gina#custom#mapping#nmap(
	      \ 'branch', 'dd',
	      \ ':call gina#action#call(''delete'')<CR>',
	      \ {'noremap': 1, 'silent': 1},
	      \)
'''
 
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
if = 'has("nvim") && !vimrc#is_windows()'
on_event = 'BufRead'
hook_source = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
    highlight = {
        enable = true,
        disable = {},
    },
    refactor = {
      highlight_defintions = {
        enable = true
      },
      smart_rename = {
        enable = true,
        smart_rename = 'grr'
      },
      navigation = {
        enable = true,
        goto_definition = 'gnd',
        list_definitions = 'gnD'
      }
    },
    ensure_installed = 'all'
}
EOF
'''

[[plugins]]
repo = 'neovim/nvim-lspconfig'
if = 'has("nvim")'
on_event = 'BufRead'
hook_source = '''
  lua require('lsp_rc')
'''

[[plugins]]
repo = 'kabouzeid/nvim-lspinstall'
on_source = 'nvim-lspconfig'
hook_source = '''
  lua require'lspinstall'.setup()
'''

[[plugins]]
repo = 'nvim-lua/popup.nvim'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
on_cmd = 'Telescope'
if = 'has("nvim")'
depends = ['popup.nvim', 'plenary.nvim']

[[plugins]]
repo = 'norcalli/nvim-colorizer.lua'
if = 'has("nvim")'
on_event = 'BufRead'
hook_source = '''
  lua require'colorizer'.setup()
'''

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css']

[[plugins]]
repo = 'lambdalisue/suda.vim'
on_event = 'BufRead'

[[plugins]]
repo = 'matsui54/denite-nvim-lsp'
if = 'has("nvim")'
on_source = 'denite.nvim'

[[plugins]]
repo = 'machakann/vim-swap'
on_map = '<plug>(swap-'
hook_add = '''
  let g:swap_no_default_key_mappings = 1

  nmap <leader>gs <Plug>(swap-interactive)
  xmap <leader>gs <Plug>(swap-interactive)
  nmap g< <Plug>(swap-prev)
  nmap g> <Plug>(swap-next)
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'
on_cmd = 'EditorConfigEnable'
