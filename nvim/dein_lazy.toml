[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = 'QuickRun'
hook_add = '''
  nnoremap <silent><Leader>d <cmd>QuickRun<CR>
'''
hook_source = '''
  let g:quickrun_config = {}
  let g:quickrun_config._ = {}
  if has('nvim')
    let g:quickrun_config._['runner'] = 'nvimterm'
  endif

  let g:quickrun_config['cpp'] = {
        \  'cmdopt' : '-std=c++2a -Wall',
        \  'outputter' : 'quickfix',
        \  'outputter/message/log' : 1
        \ }

  let g:quickrun_config['cpp/compe'] = {
        \  'type': 'cpp/g++',
        \  'input' : 'in.dat',
        \  'runner' : 'system'
        \ }

  let g:quickrun_config['vim'] = {
        \   'command': ':source',
        \   'exec': '%C %S',
        \   'hook/eval/template': 'echo %s',
        \   'runner': 'vimscript',
        \ }
  let g:quickrun_config['lua'] = {
        \   'command': ':luafile',
        \   'exec': '%C %S',
        \   'runner': 'vimscript',
        \ }

  let g:quickrun_config['typescript'] = {
        \   'type': 'typescript/deno'
        \ }

  let g:quickrun_config['gnuplot'] = {
        \   'command': 'gnuplot',
        \   'exec': '%C %S',
        \ }

  let g:quickrun_config['python/compe'] = {
        \  'type': 'python',
        \  'input' : 'in.dat',
        \  'runner' : 'system'
        \ }
'''

[[plugins]]
repo = 'vim-jp/vital.vim'
on_cmd = 'Vitalize'

[[plugins]]
repo = 'itchyny/calendar.vim'
on_cmd = 'Calendar'
hook_source = '''
  if filereadable(expand('~/.cache/calendar.vim/credentials.vim', ':h:p'))
    let g:calendar_google_calendar = 1
    let g:calendar_google_task = 1
    source ~/.cache/calendar.vim/credentials.vim
  endif
'''
[plugins.ftplugin]
calendar = '''
  nnoremap <buffer> <C-j> gT
  nnoremap <buffer> <C-k> gt
'''

[[plugins]]
repo = 'Shougo/deol.nvim'
hook_add = '''
  tnoremap <C-\><C-\> <C-\><C-N><cmd>call deol#start(#{
    \ no-auto-cd: v:true,
    \ toggle: v:true,
    \ })<CR>
  nnoremap <C-\><C-\> <cmd>call deol#start(#{
    \ no-auto-cd: v:true,
    \ toggle: v:true,
    \ winwidth: &columns/2,
    \ split: (winnr('$') == 1 && bufname()=='') ? "" : "vertical",
    \ })<CR>
  nnoremap <C-\>j <cmd>call deol#start(#{
    \ no-auto-cd: v:true,
    \ toggle: v:true,
    \ split: "h",
    \ })<CR>
'''

[[plugins]]
repo = 'rhysd/clever-f.vim'
on_map = {nxo = '<Plug>'}
hook_add = '''
  let g:clever_f_not_overwrites_standard_mappings = 1
  let g:clever_f_mark_direct = 1
  let g:clever_f_smart_case = 1
  let g:clever_f_use_migemo = 1
  nmap f <Plug>(clever-f-f)
  xmap f <Plug>(clever-f-f)
  omap f <Plug>(clever-f-f)
  nmap F <Plug>(clever-f-F)
  xmap F <Plug>(clever-f-F)
  omap F <Plug>(clever-f-F)
  nmap t <Plug>(clever-f-t)
  xmap t <Plug>(clever-f-t)
  omap t <Plug>(clever-f-t)
  nmap T <Plug>(clever-f-T)
  xmap T <Plug>(clever-f-T)
  omap T <Plug>(clever-f-T)
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
on_map = '<Plug>(openbrowser'
on_cmd = 'OpenBrowserSearch'
hook_add = '''
	nmap gx <Plug>(openbrowser-smart-search)
	vmap gx <Plug>(openbrowser-smart-search)
'''
hook_source = '''
  for cmd in ['wsl-open', 'xdg-open', 'exo-open']
    if executable(cmd)
      let g:openbrowser_browser_commands = [
      \   {'name': cmd,
      \  "args": ["{browser}", "{uri}"]},
      \]
    endif
  endfor
'''

[[plugins]]
repo = 'previm/previm'
on_cmd = 'PrevimOpen'
hook_source = '''
  let g:previm_show_header=0
  if vimrc#is_wsl()
    let g:previm_open_cmd='wsl-open'
  endif
'''
depends = 'open-browser.vim'

[[plugins]]
repo = 'tani/glance-vim'
on_cmd = 'Glance'
hook_add = '''
  let g:glance#server_open = v:false
  let g:glance#markdown_plugins = ['https://esm.sh/markdown-it-mathjax3?bundle']
'''

[[plugins]]
repo = 'tyru/caw.vim'
on_map = {nx = '<Plug>'}
if = '!has("nvim")'
hook_add = '''
  nmap gc <Plug>(caw:prefix)
  xmap gc <Plug>(caw:prefix)
  nmap gcc <Plug>(caw:hatpos:toggle)
  xmap gcc <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
repo = 'lambdalisue/gina.vim'
hook_add = '''
  nnoremap gnw <cmd>Gina browse<CR>
  nnoremap gn<Space> :Gina<Space>
'''
hook_source = '''
	call gina#custom#mapping#nmap(
	      \ '/.*', '<C-j>',
	      \ 'gT'
	      \)
	call gina#custom#mapping#nmap(
	      \ '/.*', '<C-k>',
	      \ 'gt'
	      \)
	call gina#custom#mapping#nmap(
	      \ 'status', '<Space>gc',
	      \ ':<C-u>Gina commit<CR>',
	      \ {'noremap': 1, 'silent': 1},
	      \)
	call gina#custom#mapping#nmap(
	      \ 'status', '<Space>gp',
	      \ ':<C-u>Gina push<CR>',
	      \ {'noremap': 1},
	      \)
	call gina#custom#mapping#nmap(
	      \ 'branch', 'o',
	      \ ':call gina#action#call(''new'')<CR>',
	      \ {'noremap': 1, 'silent': 1},
	      \)
	call gina#custom#mapping#nmap(
	      \ 'branch', 'dd',
	      \ ':call gina#action#call(''delete'')<CR>',
	      \ {'noremap': 1, 'silent': 1},
	      \)
'''

[[plugins]]
repo = 'lambdalisue/gin.vim'
on_event = 'CmdlineEnter'
hook_add = '''
  nnoremap gs <cmd>GinStatus<CR>
  nnoremap gnb <cmd>GinBranch -a<CR>
  nnoremap gnl <cmd>GinLog --graph 
  \ --pretty=format:%Cred%h%Creset\ -%C(yellow)%d%Creset\ %s\ %Cgreen(%ai)\ %C(bold\ blue)<%an>%Creset
  \ <CR>
'''
[plugins.ftplugin]
gin-status = '''
  nnoremap <buffer> <Space>gc <cmd>Gin commit<CR>
  nnoremap <buffer> <Space>gp :Gin push<CR>
'''
gin-branch = '''
  nmap <buffer> o <Plug>(gin-action-new)
  nmap <buffer> dd <Plug>(gin-action-delete)
'''
gitcommit = '''
  setlocal spell
'''
 
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
if = 'has("nvim")'
on_event = 'BufRead'
rev = "main"
hook_post_update = 'TSUpdate'
lua_source = '''
  -- Install parsers
  require'nvim-treesitter'.install {
    'c',
    'javascript',
    'rust',
    'python',
    'toml',
    'typescript',
  }

  -- Enable highlight
  vim.api.nvim_create_autocmd('FileType', {
    pattern = {
      'c',
      'python',
      'rust',
      'typescript',
      'vim',
      'toml',
    },
    callback = function()
      vim.treesitter.start()
    end,
  })
'''

[[plugins]]
repo = 'neovim/nvim-lspconfig'
if = 'has("nvim")'
on_event = 'BufRead'
lua_source = '''
  require('lsp_rc')
'''
hook_add = '''
  nnoremap \f <cmd>lua vim.lsp.buf.format({ async = true })<CR>
  nnoremap gm <cmd>lua vim.diagnostic.open_float()<CR>
'''

[[plugins]]
repo = "liuchengxu/vista.vim"
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
on_source = 'nvim-lspconfig'
lua_source = '''
  require("mason-lspconfig").setup({
    ensure_installed = { "rust_analyzer", "lua_ls", "texlab", "vimls", "pyright", "bashls" },
  })
'''

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
on_cmd = 'Telescope'
if = 'has("nvim")'
depends = ['popup.nvim', 'plenary.nvim']

[[plugins]]
repo = 'lambdalisue/suda.vim'
on_cmd = ['SudaRead', 'SudaWrite']
on_event = 'BufRead'

[[plugins]]
repo = 'machakann/vim-swap'
on_map = '<plug>(swap-'
hook_add = '''
  let g:swap_no_default_key_mappings = 1

  nmap <leader>gs <Plug>(swap-interactive)
  xmap <leader>gs <Plug>(swap-interactive)
  nmap g< <Plug>(swap-prev)
  nmap g> <Plug>(swap-next)
'''

[[plugins]]
repo = 'rhysd/git-messenger.vim'
on_cmd = 'GitMessenger'
on_map = '<Plug>(git-messenger)'
hook_add = '''
  let g:git_messenger_no_default_mappings = v:true
  let g:git_messenger_always_into_popup=v:true
  nmap <Leader>gm <Plug>(git-messenger)
'''

[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'
on_event = 'BufRead'
hook_add = '''
let g:indentLine_fileTypeExclude = ['help', 'calendar']
'''

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_cmd = 'Qfreplace'

[[plugins]]
repo = 'tyru/capture.vim'
on_cmd = 'Capture'

[[plugins]]
repo = 'thinca/vim-prettyprint'
on_cmd = ['PrettyPrint', 'PP']

[[plugins]]
repo = "mbbill/undotree"
on_cmd = 'UndotreeToggle'

[[plugins]]
repo = 'yuki-yano/fuzzy-motion.vim'
depends = 'denops.vim'
hook_add = '''
nnoremap <Space>/ <cmd>FuzzyMotion<CR>
'''
on_cmd = 'FuzzyMotion'

[[plugins]]
repo = "lewis6991/gitsigns.nvim"
lua_source = '''
vim.api.nvim_set_hl(0, 'GitSignsAdd', { link = 'DiffAdd' })
vim.api.nvim_set_hl(0, 'GitSignsChange', { link = 'DiffChange' })
vim.api.nvim_set_hl(0, 'GitSignsDelete', { link = 'DiffDelete' })
require('gitsigns').setup {
  signs = {
    change = {text = '!'},
  },
  on_attach = function(bufnr)
    local gs = package.loaded.gitsigns

    local function map(mode, l, r, opts)
      opts = opts or {}
      opts.buffer = bufnr
      vim.keymap.set(mode, l, r, opts)
    end

    -- Navigation
    map('n', ']c', function()
      if vim.wo.diff then return ']c' end
      vim.schedule(function() gs.next_hunk() end)
      return '<Ignore>'
    end, { expr = true })

    map('n', '[c', function()
      if vim.wo.diff then return '[c' end
      vim.schedule(function() gs.prev_hunk() end)
      return '<Ignore>'
    end, { expr = true })

    -- Actions
    map({ 'n', 'v' }, '<leader>hs', ':Gitsigns stage_hunk<CR>')
    map({ 'n', 'v' }, '<leader>hr', ':Gitsigns reset_hunk<CR>')
    map('n', '<leader>hS', gs.stage_buffer)
    map('n', '<leader>hu', gs.undo_stage_hunk)
    map('n', '<leader>hR', gs.reset_buffer)
    map('n', '<leader>hp', gs.preview_hunk)
    map('n', '<leader>hb', function() gs.blame_line { full = true } end)
    map('n', '<leader>tb', gs.toggle_current_line_blame)
    map('n', '<leader>hd', gs.diffthis)
    map('n', '<leader>hD', function() gs.diffthis('~') end)
    map('n', '<leader>td', gs.toggle_deleted)

    -- Text object
    map({ 'o', 'x' }, 'ih', ':<C-U>Gitsigns select_hunk<CR>')
  end
}
'''
on_event = 'BufRead'

[[plugins]]
repo = 'tweekmonster/helpful.vim'
on_cmd = ['HelpfulVersion']

[[plugins]]
repo = "j-hui/fidget.nvim"
on_source = 'nvim-lspconfig'
lua_source = '''
  require"fidget".setup{}
'''

[[plugins]]
repo = 'cohama/lexima.vim'
hook_add = '''
  let g:lexima_ctrlh_as_backspace = 1
'''
hook_source = '''
  call lexima#add_rule({'char': "'", 'input': "'", 'filetype': ['verilog', 'systemverilog']})
'''
on_event = 'InsertEnter'

[[plugins]]
repo = 'mattn/vim-sonictemplate'
on_cmd = 'Template'
hook_add = '''
  let g:sonictemplate_vim_template_dir = '$HOME/dotfiles/nvim/template/'
'''

[[plugins]]
repo = "mfussenegger/nvim-dap"
on_event = 'BufRead'
depends = ["nvim-dap-ui", "nvim-dap-virtual-text"]
lua_source = '''
  require('dap_rc')
'''

[[plugins]]
repo = "rcarriga/nvim-dap-ui"
depends = "nvim-nio"
lua_source = '''
  require("dapui").setup()
'''

[[plugins]]
repo = "nvim-neotest/nvim-nio"

[[plugins]]
repo = "theHamsta/nvim-dap-virtual-text"
lua_source = '''
  require("nvim-dap-virtual-text").setup()
'''

[[plugins]]
repo = "folke/lazydev.nvim"
on_source = 'nvim-lspconfig'

[[plugins]]
repo = "uga-rosa/ccc.nvim"
on_cmd = "CccHighlighterToggle"
lua_source = '''
	require("ccc").setup({
	})
'''

[[plugins]]
repo = "github/copilot.vim"
on_cmd = 'Copilot'
hook_add = '''
  let g:copilot_no_tab_map = v:true
  imap <silent><script><expr> <C-v> copilot#Accept("\<CR>")
'''

[[plugins]]
repo = "mechatroner/rainbow_csv"
on_ft = ["csv"]
hook_add = '''
  let g:disable_rainbow_hover = 1
'''
